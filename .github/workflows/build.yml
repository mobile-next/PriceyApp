name: Build1

on:
  push:
    branches:
      - main
    tags:
      - "*.*.*"
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Import certificates and provisioning profile
      env:
        APPLE_WWDR_CERT: ${{ secrets.APPLE_WWDR_CERT }}
        DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT }}
        DEVELOPER_ID_APPLICATION_PASSWORD: ${{ secrets.DEVELOPER_ID_APPLICATION_PASSWORD }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      run: |
        # Create keychain
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain

        echo -n "$APPLE_WWDR_CERT" | base64 --decode > apple_wwdr.cer
        security import apple_wwdr.cer -k build.keychain -T /usr/bin/codesign
    
        echo -n "$DEVELOPER_ID_APPLICATION_CERT" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$DEVELOPER_ID_APPLICATION_PASSWORD" -A -t cert -f pkcs12

        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/Pricey_Developer_ID_Application.provisionprofile
    
        # security dump-keychain build.keychain
        # security list-keychain -d user -s build.keychain

        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # List identities to verify import
        security find-identity -v -p codesigning

        security default-keychain -s build.keychain

    - name: Archive app
      env:
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
      run: |
        xcodebuild \
          DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
          CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
          -scheme Pricey \
          -archivePath archive_path.xcarchive \
          archive

    - name: Export archive
      env:
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        EXPORT_OPTIONS_PLIST: ${{ vars.EXPORT_OPTIONS_PLIST }}
      run: |
        echo $EXPORT_OPTIONS_PLIST > export_options.plist
        ls -l export_options.plist
        xcodebuild \
          DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
          CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
          -exportArchive \
          -archivePath archive_path.xcarchive \
          -exportOptionsPlist export_options.plist \
          -exportPath export_path
        
    - name: Create app bundle
      run: |
        cd export_path
        ditto -c -k --keepParent Pricey.app ../Pricey-darwin-arm64.zip

    - name: Submit to Notary
      env:
        NOTARY_KEY: ${{ secrets.NOTARY_KEY }}
        NOTARY_KEY_ID: ${{ secrets.NOTARY_KEY_ID }}
        NOTARY_ISSUER: ${{ secrets.NOTARY_ISSUER }}
      run: |
        echo $NOTARY_KEY | base64 --decode > AuthKey.p8
        ls -l AuthKey.p8
        xcrun notarytool submit Pricey-darwin-arm64.zip --key AuthKey.p8 --key-id $NOTARY_KEY_ID --issuer $NOTARY_ISSUER --wait
        rm -f AuthKey.p8
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: Pricey-darwin-arm64
        path: Pricey-darwin-arm64.zip

    - name: Upload release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./Pricey-darwin-arm64.zip
        asset_name: Pricey-darwin-arm64.zip
        asset_content_type: application/octet-stream

